<?php
/**
 * VMMonitoringItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VMMonitoringItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VMMonitoringItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VMMonitoringItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu' => 'float',
        'disk_rd_bytes' => 'int',
        'disk_rd_iops' => 'int',
        'disk_wr_bytes' => 'int',
        'disk_wr_iops' => 'int',
        'memory' => 'int',
        'net_rx' => 'int',
        'net_tx' => 'int',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu' => 'float',
        'disk_rd_bytes' => 'int32',
        'disk_rd_iops' => 'int32',
        'disk_wr_bytes' => 'int32',
        'disk_wr_iops' => 'int32',
        'memory' => 'int32',
        'net_rx' => 'int32',
        'net_tx' => 'int32',
        'timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu' => 'cpu',
        'disk_rd_bytes' => 'diskRdBytes',
        'disk_rd_iops' => 'diskRdIops',
        'disk_wr_bytes' => 'diskWrBytes',
        'disk_wr_iops' => 'diskWrIops',
        'memory' => 'memory',
        'net_rx' => 'netRx',
        'net_tx' => 'netTx',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu' => 'setCpu',
        'disk_rd_bytes' => 'setDiskRdBytes',
        'disk_rd_iops' => 'setDiskRdIops',
        'disk_wr_bytes' => 'setDiskWrBytes',
        'disk_wr_iops' => 'setDiskWrIops',
        'memory' => 'setMemory',
        'net_rx' => 'setNetRx',
        'net_tx' => 'setNetTx',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu' => 'getCpu',
        'disk_rd_bytes' => 'getDiskRdBytes',
        'disk_rd_iops' => 'getDiskRdIops',
        'disk_wr_bytes' => 'getDiskWrBytes',
        'disk_wr_iops' => 'getDiskWrIops',
        'memory' => 'getMemory',
        'net_rx' => 'getNetRx',
        'net_tx' => 'getNetTx',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu'] = isset($data['cpu']) ? $data['cpu'] : null;
        $this->container['disk_rd_bytes'] = isset($data['disk_rd_bytes']) ? $data['disk_rd_bytes'] : null;
        $this->container['disk_rd_iops'] = isset($data['disk_rd_iops']) ? $data['disk_rd_iops'] : null;
        $this->container['disk_wr_bytes'] = isset($data['disk_wr_bytes']) ? $data['disk_wr_bytes'] : null;
        $this->container['disk_wr_iops'] = isset($data['disk_wr_iops']) ? $data['disk_wr_iops'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['net_rx'] = isset($data['net_rx']) ? $data['net_rx'] : null;
        $this->container['net_tx'] = isset($data['net_tx']) ? $data['net_tx'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu
     *
     * @return float
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param float $cpu cpu
     *
     * @return $this
     */
    public function setCpu($cpu)
    {
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets disk_rd_bytes
     *
     * @return int
     */
    public function getDiskRdBytes()
    {
        return $this->container['disk_rd_bytes'];
    }

    /**
     * Sets disk_rd_bytes
     *
     * @param int $disk_rd_bytes disk_rd_bytes
     *
     * @return $this
     */
    public function setDiskRdBytes($disk_rd_bytes)
    {
        $this->container['disk_rd_bytes'] = $disk_rd_bytes;

        return $this;
    }

    /**
     * Gets disk_rd_iops
     *
     * @return int
     */
    public function getDiskRdIops()
    {
        return $this->container['disk_rd_iops'];
    }

    /**
     * Sets disk_rd_iops
     *
     * @param int $disk_rd_iops disk_rd_iops
     *
     * @return $this
     */
    public function setDiskRdIops($disk_rd_iops)
    {
        $this->container['disk_rd_iops'] = $disk_rd_iops;

        return $this;
    }

    /**
     * Gets disk_wr_bytes
     *
     * @return int
     */
    public function getDiskWrBytes()
    {
        return $this->container['disk_wr_bytes'];
    }

    /**
     * Sets disk_wr_bytes
     *
     * @param int $disk_wr_bytes disk_wr_bytes
     *
     * @return $this
     */
    public function setDiskWrBytes($disk_wr_bytes)
    {
        $this->container['disk_wr_bytes'] = $disk_wr_bytes;

        return $this;
    }

    /**
     * Gets disk_wr_iops
     *
     * @return int
     */
    public function getDiskWrIops()
    {
        return $this->container['disk_wr_iops'];
    }

    /**
     * Sets disk_wr_iops
     *
     * @param int $disk_wr_iops disk_wr_iops
     *
     * @return $this
     */
    public function setDiskWrIops($disk_wr_iops)
    {
        $this->container['disk_wr_iops'] = $disk_wr_iops;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return int
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param int $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets net_rx
     *
     * @return int
     */
    public function getNetRx()
    {
        return $this->container['net_rx'];
    }

    /**
     * Sets net_rx
     *
     * @param int $net_rx net_rx
     *
     * @return $this
     */
    public function setNetRx($net_rx)
    {
        $this->container['net_rx'] = $net_rx;

        return $this;
    }

    /**
     * Gets net_tx
     *
     * @return int
     */
    public function getNetTx()
    {
        return $this->container['net_tx'];
    }

    /**
     * Sets net_tx
     *
     * @param int $net_tx net_tx
     *
     * @return $this
     */
    public function setNetTx($net_tx)
    {
        $this->container['net_tx'] = $net_tx;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
