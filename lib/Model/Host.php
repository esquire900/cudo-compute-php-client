<?php
/**
 * Host
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Host Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Host implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Host';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_model' => 'string',
        'create_time' => '\DateTime',
        'gpu_free' => 'int',
        'gpu_model' => 'string',
        'gpu_used' => 'int',
        'machine_type' => 'string',
        'memory_gib_free' => 'int',
        'memory_gib_used' => 'int',
        'name' => 'string',
        'online' => 'bool',
        'update_time' => '\DateTime',
        'vcpu_free' => 'int',
        'vcpu_per_cpu_thread' => 'int',
        'vcpu_used' => 'int',
        'vm_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_model' => null,
        'create_time' => 'date-time',
        'gpu_free' => 'int32',
        'gpu_model' => null,
        'gpu_used' => 'int32',
        'machine_type' => null,
        'memory_gib_free' => 'int32',
        'memory_gib_used' => 'int32',
        'name' => null,
        'online' => null,
        'update_time' => 'date-time',
        'vcpu_free' => 'int32',
        'vcpu_per_cpu_thread' => 'int32',
        'vcpu_used' => 'int32',
        'vm_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_model' => 'cpuModel',
        'create_time' => 'createTime',
        'gpu_free' => 'gpuFree',
        'gpu_model' => 'gpuModel',
        'gpu_used' => 'gpuUsed',
        'machine_type' => 'machineType',
        'memory_gib_free' => 'memoryGibFree',
        'memory_gib_used' => 'memoryGibUsed',
        'name' => 'name',
        'online' => 'online',
        'update_time' => 'updateTime',
        'vcpu_free' => 'vcpuFree',
        'vcpu_per_cpu_thread' => 'vcpuPerCpuThread',
        'vcpu_used' => 'vcpuUsed',
        'vm_count' => 'vmCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_model' => 'setCpuModel',
        'create_time' => 'setCreateTime',
        'gpu_free' => 'setGpuFree',
        'gpu_model' => 'setGpuModel',
        'gpu_used' => 'setGpuUsed',
        'machine_type' => 'setMachineType',
        'memory_gib_free' => 'setMemoryGibFree',
        'memory_gib_used' => 'setMemoryGibUsed',
        'name' => 'setName',
        'online' => 'setOnline',
        'update_time' => 'setUpdateTime',
        'vcpu_free' => 'setVcpuFree',
        'vcpu_per_cpu_thread' => 'setVcpuPerCpuThread',
        'vcpu_used' => 'setVcpuUsed',
        'vm_count' => 'setVmCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_model' => 'getCpuModel',
        'create_time' => 'getCreateTime',
        'gpu_free' => 'getGpuFree',
        'gpu_model' => 'getGpuModel',
        'gpu_used' => 'getGpuUsed',
        'machine_type' => 'getMachineType',
        'memory_gib_free' => 'getMemoryGibFree',
        'memory_gib_used' => 'getMemoryGibUsed',
        'name' => 'getName',
        'online' => 'getOnline',
        'update_time' => 'getUpdateTime',
        'vcpu_free' => 'getVcpuFree',
        'vcpu_per_cpu_thread' => 'getVcpuPerCpuThread',
        'vcpu_used' => 'getVcpuUsed',
        'vm_count' => 'getVmCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_model'] = isset($data['cpu_model']) ? $data['cpu_model'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['gpu_free'] = isset($data['gpu_free']) ? $data['gpu_free'] : null;
        $this->container['gpu_model'] = isset($data['gpu_model']) ? $data['gpu_model'] : null;
        $this->container['gpu_used'] = isset($data['gpu_used']) ? $data['gpu_used'] : null;
        $this->container['machine_type'] = isset($data['machine_type']) ? $data['machine_type'] : null;
        $this->container['memory_gib_free'] = isset($data['memory_gib_free']) ? $data['memory_gib_free'] : null;
        $this->container['memory_gib_used'] = isset($data['memory_gib_used']) ? $data['memory_gib_used'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['vcpu_free'] = isset($data['vcpu_free']) ? $data['vcpu_free'] : null;
        $this->container['vcpu_per_cpu_thread'] = isset($data['vcpu_per_cpu_thread']) ? $data['vcpu_per_cpu_thread'] : null;
        $this->container['vcpu_used'] = isset($data['vcpu_used']) ? $data['vcpu_used'] : null;
        $this->container['vm_count'] = isset($data['vm_count']) ? $data['vm_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cpu_model'] === null) {
            $invalidProperties[] = "'cpu_model' can't be null";
        }
        if ($this->container['create_time'] === null) {
            $invalidProperties[] = "'create_time' can't be null";
        }
        if ($this->container['gpu_free'] === null) {
            $invalidProperties[] = "'gpu_free' can't be null";
        }
        if ($this->container['gpu_model'] === null) {
            $invalidProperties[] = "'gpu_model' can't be null";
        }
        if ($this->container['gpu_used'] === null) {
            $invalidProperties[] = "'gpu_used' can't be null";
        }
        if ($this->container['machine_type'] === null) {
            $invalidProperties[] = "'machine_type' can't be null";
        }
        if ($this->container['memory_gib_free'] === null) {
            $invalidProperties[] = "'memory_gib_free' can't be null";
        }
        if ($this->container['memory_gib_used'] === null) {
            $invalidProperties[] = "'memory_gib_used' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['online'] === null) {
            $invalidProperties[] = "'online' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['vcpu_free'] === null) {
            $invalidProperties[] = "'vcpu_free' can't be null";
        }
        if ($this->container['vcpu_per_cpu_thread'] === null) {
            $invalidProperties[] = "'vcpu_per_cpu_thread' can't be null";
        }
        if ($this->container['vcpu_used'] === null) {
            $invalidProperties[] = "'vcpu_used' can't be null";
        }
        if ($this->container['vm_count'] === null) {
            $invalidProperties[] = "'vm_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_model
     *
     * @return string
     */
    public function getCpuModel()
    {
        return $this->container['cpu_model'];
    }

    /**
     * Sets cpu_model
     *
     * @param string $cpu_model cpu_model
     *
     * @return $this
     */
    public function setCpuModel($cpu_model)
    {
        $this->container['cpu_model'] = $cpu_model;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param \DateTime $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets gpu_free
     *
     * @return int
     */
    public function getGpuFree()
    {
        return $this->container['gpu_free'];
    }

    /**
     * Sets gpu_free
     *
     * @param int $gpu_free gpu_free
     *
     * @return $this
     */
    public function setGpuFree($gpu_free)
    {
        $this->container['gpu_free'] = $gpu_free;

        return $this;
    }

    /**
     * Gets gpu_model
     *
     * @return string
     */
    public function getGpuModel()
    {
        return $this->container['gpu_model'];
    }

    /**
     * Sets gpu_model
     *
     * @param string $gpu_model gpu_model
     *
     * @return $this
     */
    public function setGpuModel($gpu_model)
    {
        $this->container['gpu_model'] = $gpu_model;

        return $this;
    }

    /**
     * Gets gpu_used
     *
     * @return int
     */
    public function getGpuUsed()
    {
        return $this->container['gpu_used'];
    }

    /**
     * Sets gpu_used
     *
     * @param int $gpu_used gpu_used
     *
     * @return $this
     */
    public function setGpuUsed($gpu_used)
    {
        $this->container['gpu_used'] = $gpu_used;

        return $this;
    }

    /**
     * Gets machine_type
     *
     * @return string
     */
    public function getMachineType()
    {
        return $this->container['machine_type'];
    }

    /**
     * Sets machine_type
     *
     * @param string $machine_type machine_type
     *
     * @return $this
     */
    public function setMachineType($machine_type)
    {
        $this->container['machine_type'] = $machine_type;

        return $this;
    }

    /**
     * Gets memory_gib_free
     *
     * @return int
     */
    public function getMemoryGibFree()
    {
        return $this->container['memory_gib_free'];
    }

    /**
     * Sets memory_gib_free
     *
     * @param int $memory_gib_free memory_gib_free
     *
     * @return $this
     */
    public function setMemoryGibFree($memory_gib_free)
    {
        $this->container['memory_gib_free'] = $memory_gib_free;

        return $this;
    }

    /**
     * Gets memory_gib_used
     *
     * @return int
     */
    public function getMemoryGibUsed()
    {
        return $this->container['memory_gib_used'];
    }

    /**
     * Sets memory_gib_used
     *
     * @param int $memory_gib_used memory_gib_used
     *
     * @return $this
     */
    public function setMemoryGibUsed($memory_gib_used)
    {
        $this->container['memory_gib_used'] = $memory_gib_used;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool $online online
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return \DateTime
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param \DateTime $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets vcpu_free
     *
     * @return int
     */
    public function getVcpuFree()
    {
        return $this->container['vcpu_free'];
    }

    /**
     * Sets vcpu_free
     *
     * @param int $vcpu_free vcpu_free
     *
     * @return $this
     */
    public function setVcpuFree($vcpu_free)
    {
        $this->container['vcpu_free'] = $vcpu_free;

        return $this;
    }

    /**
     * Gets vcpu_per_cpu_thread
     *
     * @return int
     */
    public function getVcpuPerCpuThread()
    {
        return $this->container['vcpu_per_cpu_thread'];
    }

    /**
     * Sets vcpu_per_cpu_thread
     *
     * @param int $vcpu_per_cpu_thread vcpu_per_cpu_thread
     *
     * @return $this
     */
    public function setVcpuPerCpuThread($vcpu_per_cpu_thread)
    {
        $this->container['vcpu_per_cpu_thread'] = $vcpu_per_cpu_thread;

        return $this;
    }

    /**
     * Gets vcpu_used
     *
     * @return int
     */
    public function getVcpuUsed()
    {
        return $this->container['vcpu_used'];
    }

    /**
     * Sets vcpu_used
     *
     * @param int $vcpu_used vcpu_used
     *
     * @return $this
     */
    public function setVcpuUsed($vcpu_used)
    {
        $this->container['vcpu_used'] = $vcpu_used;

        return $this;
    }

    /**
     * Gets vm_count
     *
     * @return int
     */
    public function getVmCount()
    {
        return $this->container['vm_count'];
    }

    /**
     * Sets vm_count
     *
     * @param int $vm_count vm_count
     *
     * @return $this
     */
    public function setVmCount($vm_count)
    {
        $this->container['vm_count'] = $vm_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
