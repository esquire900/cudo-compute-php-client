<?php
/**
 * Network
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Network Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Network implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Network';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_state' => 'string',
        'data_center_id' => 'string',
        'external_ip_address' => 'string',
        'gateway' => 'string',
        'id' => 'string',
        'init_state' => 'string',
        'internal_ip_address' => 'string',
        'ip_range' => 'string',
        'network_state' => '\Swagger\Client\Model\NetworkState',
        'price_hr' => '\Swagger\Client\Model\Decimal',
        'short_state' => 'string',
        'size' => '\Swagger\Client\Model\VRouterSize'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_state' => null,
        'data_center_id' => null,
        'external_ip_address' => null,
        'gateway' => null,
        'id' => null,
        'init_state' => null,
        'internal_ip_address' => null,
        'ip_range' => null,
        'network_state' => null,
        'price_hr' => null,
        'short_state' => null,
        'size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_state' => 'activeState',
        'data_center_id' => 'dataCenterId',
        'external_ip_address' => 'externalIpAddress',
        'gateway' => 'gateway',
        'id' => 'id',
        'init_state' => 'initState',
        'internal_ip_address' => 'internalIpAddress',
        'ip_range' => 'ipRange',
        'network_state' => 'networkState',
        'price_hr' => 'priceHr',
        'short_state' => 'shortState',
        'size' => 'size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_state' => 'setActiveState',
        'data_center_id' => 'setDataCenterId',
        'external_ip_address' => 'setExternalIpAddress',
        'gateway' => 'setGateway',
        'id' => 'setId',
        'init_state' => 'setInitState',
        'internal_ip_address' => 'setInternalIpAddress',
        'ip_range' => 'setIpRange',
        'network_state' => 'setNetworkState',
        'price_hr' => 'setPriceHr',
        'short_state' => 'setShortState',
        'size' => 'setSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_state' => 'getActiveState',
        'data_center_id' => 'getDataCenterId',
        'external_ip_address' => 'getExternalIpAddress',
        'gateway' => 'getGateway',
        'id' => 'getId',
        'init_state' => 'getInitState',
        'internal_ip_address' => 'getInternalIpAddress',
        'ip_range' => 'getIpRange',
        'network_state' => 'getNetworkState',
        'price_hr' => 'getPriceHr',
        'short_state' => 'getShortState',
        'size' => 'getSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_state'] = isset($data['active_state']) ? $data['active_state'] : null;
        $this->container['data_center_id'] = isset($data['data_center_id']) ? $data['data_center_id'] : null;
        $this->container['external_ip_address'] = isset($data['external_ip_address']) ? $data['external_ip_address'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['init_state'] = isset($data['init_state']) ? $data['init_state'] : null;
        $this->container['internal_ip_address'] = isset($data['internal_ip_address']) ? $data['internal_ip_address'] : null;
        $this->container['ip_range'] = isset($data['ip_range']) ? $data['ip_range'] : null;
        $this->container['network_state'] = isset($data['network_state']) ? $data['network_state'] : null;
        $this->container['price_hr'] = isset($data['price_hr']) ? $data['price_hr'] : null;
        $this->container['short_state'] = isset($data['short_state']) ? $data['short_state'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_state
     *
     * @return string
     */
    public function getActiveState()
    {
        return $this->container['active_state'];
    }

    /**
     * Sets active_state
     *
     * @param string $active_state active_state
     *
     * @return $this
     */
    public function setActiveState($active_state)
    {
        $this->container['active_state'] = $active_state;

        return $this;
    }

    /**
     * Gets data_center_id
     *
     * @return string
     */
    public function getDataCenterId()
    {
        return $this->container['data_center_id'];
    }

    /**
     * Sets data_center_id
     *
     * @param string $data_center_id data_center_id
     *
     * @return $this
     */
    public function setDataCenterId($data_center_id)
    {
        $this->container['data_center_id'] = $data_center_id;

        return $this;
    }

    /**
     * Gets external_ip_address
     *
     * @return string
     */
    public function getExternalIpAddress()
    {
        return $this->container['external_ip_address'];
    }

    /**
     * Sets external_ip_address
     *
     * @param string $external_ip_address external_ip_address
     *
     * @return $this
     */
    public function setExternalIpAddress($external_ip_address)
    {
        $this->container['external_ip_address'] = $external_ip_address;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string $gateway gateway
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets init_state
     *
     * @return string
     */
    public function getInitState()
    {
        return $this->container['init_state'];
    }

    /**
     * Sets init_state
     *
     * @param string $init_state init_state
     *
     * @return $this
     */
    public function setInitState($init_state)
    {
        $this->container['init_state'] = $init_state;

        return $this;
    }

    /**
     * Gets internal_ip_address
     *
     * @return string
     */
    public function getInternalIpAddress()
    {
        return $this->container['internal_ip_address'];
    }

    /**
     * Sets internal_ip_address
     *
     * @param string $internal_ip_address internal_ip_address
     *
     * @return $this
     */
    public function setInternalIpAddress($internal_ip_address)
    {
        $this->container['internal_ip_address'] = $internal_ip_address;

        return $this;
    }

    /**
     * Gets ip_range
     *
     * @return string
     */
    public function getIpRange()
    {
        return $this->container['ip_range'];
    }

    /**
     * Sets ip_range
     *
     * @param string $ip_range ip_range
     *
     * @return $this
     */
    public function setIpRange($ip_range)
    {
        $this->container['ip_range'] = $ip_range;

        return $this;
    }

    /**
     * Gets network_state
     *
     * @return \Swagger\Client\Model\NetworkState
     */
    public function getNetworkState()
    {
        return $this->container['network_state'];
    }

    /**
     * Sets network_state
     *
     * @param \Swagger\Client\Model\NetworkState $network_state network_state
     *
     * @return $this
     */
    public function setNetworkState($network_state)
    {
        $this->container['network_state'] = $network_state;

        return $this;
    }

    /**
     * Gets price_hr
     *
     * @return \Swagger\Client\Model\Decimal
     */
    public function getPriceHr()
    {
        return $this->container['price_hr'];
    }

    /**
     * Sets price_hr
     *
     * @param \Swagger\Client\Model\Decimal $price_hr price_hr
     *
     * @return $this
     */
    public function setPriceHr($price_hr)
    {
        $this->container['price_hr'] = $price_hr;

        return $this;
    }

    /**
     * Gets short_state
     *
     * @return string
     */
    public function getShortState()
    {
        return $this->container['short_state'];
    }

    /**
     * Sets short_state
     *
     * @param string $short_state short_state
     *
     * @return $this
     */
    public function setShortState($short_state)
    {
        $this->container['short_state'] = $short_state;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \Swagger\Client\Model\VRouterSize
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \Swagger\Client\Model\VRouterSize $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
