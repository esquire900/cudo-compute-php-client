<?php
/**
 * BillingAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BillingAccount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillingAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillingAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'billing_threshold' => '\Swagger\Client\Model\Decimal',
        'create_by' => 'string',
        'create_time' => '\DateTime',
        'demand_enabled' => 'bool',
        'display_name' => 'string',
        'id' => 'string',
        'invoice_time' => '\DateTime',
        'monthly_spend' => 'string',
        'stripe_ref' => 'string',
        'supply_enabled' => 'bool',
        'tax_ids' => '\Swagger\Client\Model\TaxId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'billing_threshold' => null,
        'create_by' => null,
        'create_time' => 'date-time',
        'demand_enabled' => null,
        'display_name' => null,
        'id' => null,
        'invoice_time' => 'date-time',
        'monthly_spend' => null,
        'stripe_ref' => null,
        'supply_enabled' => null,
        'tax_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billing_threshold' => 'billingThreshold',
        'create_by' => 'createBy',
        'create_time' => 'createTime',
        'demand_enabled' => 'demandEnabled',
        'display_name' => 'displayName',
        'id' => 'id',
        'invoice_time' => 'invoiceTime',
        'monthly_spend' => 'monthlySpend',
        'stripe_ref' => 'stripeRef',
        'supply_enabled' => 'supplyEnabled',
        'tax_ids' => 'taxIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billing_threshold' => 'setBillingThreshold',
        'create_by' => 'setCreateBy',
        'create_time' => 'setCreateTime',
        'demand_enabled' => 'setDemandEnabled',
        'display_name' => 'setDisplayName',
        'id' => 'setId',
        'invoice_time' => 'setInvoiceTime',
        'monthly_spend' => 'setMonthlySpend',
        'stripe_ref' => 'setStripeRef',
        'supply_enabled' => 'setSupplyEnabled',
        'tax_ids' => 'setTaxIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billing_threshold' => 'getBillingThreshold',
        'create_by' => 'getCreateBy',
        'create_time' => 'getCreateTime',
        'demand_enabled' => 'getDemandEnabled',
        'display_name' => 'getDisplayName',
        'id' => 'getId',
        'invoice_time' => 'getInvoiceTime',
        'monthly_spend' => 'getMonthlySpend',
        'stripe_ref' => 'getStripeRef',
        'supply_enabled' => 'getSupplyEnabled',
        'tax_ids' => 'getTaxIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['billing_threshold'] = isset($data['billing_threshold']) ? $data['billing_threshold'] : null;
        $this->container['create_by'] = isset($data['create_by']) ? $data['create_by'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['demand_enabled'] = isset($data['demand_enabled']) ? $data['demand_enabled'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_time'] = isset($data['invoice_time']) ? $data['invoice_time'] : null;
        $this->container['monthly_spend'] = isset($data['monthly_spend']) ? $data['monthly_spend'] : null;
        $this->container['stripe_ref'] = isset($data['stripe_ref']) ? $data['stripe_ref'] : null;
        $this->container['supply_enabled'] = isset($data['supply_enabled']) ? $data['supply_enabled'] : null;
        $this->container['tax_ids'] = isset($data['tax_ids']) ? $data['tax_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets billing_threshold
     *
     * @return \Swagger\Client\Model\Decimal
     */
    public function getBillingThreshold()
    {
        return $this->container['billing_threshold'];
    }

    /**
     * Sets billing_threshold
     *
     * @param \Swagger\Client\Model\Decimal $billing_threshold billing_threshold
     *
     * @return $this
     */
    public function setBillingThreshold($billing_threshold)
    {
        $this->container['billing_threshold'] = $billing_threshold;

        return $this;
    }

    /**
     * Gets create_by
     *
     * @return string
     */
    public function getCreateBy()
    {
        return $this->container['create_by'];
    }

    /**
     * Sets create_by
     *
     * @param string $create_by create_by
     *
     * @return $this
     */
    public function setCreateBy($create_by)
    {
        $this->container['create_by'] = $create_by;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param \DateTime $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets demand_enabled
     *
     * @return bool
     */
    public function getDemandEnabled()
    {
        return $this->container['demand_enabled'];
    }

    /**
     * Sets demand_enabled
     *
     * @param bool $demand_enabled demand_enabled
     *
     * @return $this
     */
    public function setDemandEnabled($demand_enabled)
    {
        $this->container['demand_enabled'] = $demand_enabled;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_time
     *
     * @return \DateTime
     */
    public function getInvoiceTime()
    {
        return $this->container['invoice_time'];
    }

    /**
     * Sets invoice_time
     *
     * @param \DateTime $invoice_time invoice_time
     *
     * @return $this
     */
    public function setInvoiceTime($invoice_time)
    {
        $this->container['invoice_time'] = $invoice_time;

        return $this;
    }

    /**
     * Gets monthly_spend
     *
     * @return string
     */
    public function getMonthlySpend()
    {
        return $this->container['monthly_spend'];
    }

    /**
     * Sets monthly_spend
     *
     * @param string $monthly_spend monthly_spend
     *
     * @return $this
     */
    public function setMonthlySpend($monthly_spend)
    {
        $this->container['monthly_spend'] = $monthly_spend;

        return $this;
    }

    /**
     * Gets stripe_ref
     *
     * @return string
     */
    public function getStripeRef()
    {
        return $this->container['stripe_ref'];
    }

    /**
     * Sets stripe_ref
     *
     * @param string $stripe_ref stripe_ref
     *
     * @return $this
     */
    public function setStripeRef($stripe_ref)
    {
        $this->container['stripe_ref'] = $stripe_ref;

        return $this;
    }

    /**
     * Gets supply_enabled
     *
     * @return bool
     */
    public function getSupplyEnabled()
    {
        return $this->container['supply_enabled'];
    }

    /**
     * Sets supply_enabled
     *
     * @param bool $supply_enabled supply_enabled
     *
     * @return $this
     */
    public function setSupplyEnabled($supply_enabled)
    {
        $this->container['supply_enabled'] = $supply_enabled;

        return $this;
    }

    /**
     * Gets tax_ids
     *
     * @return \Swagger\Client\Model\TaxId[]
     */
    public function getTaxIds()
    {
        return $this->container['tax_ids'];
    }

    /**
     * Sets tax_ids
     *
     * @param \Swagger\Client\Model\TaxId[] $tax_ids tax_ids
     *
     * @return $this
     */
    public function setTaxIds($tax_ids)
    {
        $this->container['tax_ids'] = $tax_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
