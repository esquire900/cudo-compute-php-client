<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_due' => 'string',
        'amount_paid' => 'string',
        'amount_remaining' => 'string',
        'auto_advance' => 'bool',
        'billing_reason' => 'string',
        'created' => 'string',
        'currency' => 'string',
        'description' => 'string',
        'due_date' => 'string',
        'hosted_invoice_url' => 'string',
        'id' => 'string',
        'number' => 'string',
        'paid_date' => 'string',
        'period_end' => 'string',
        'period_start' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_due' => 'int64',
        'amount_paid' => 'int64',
        'amount_remaining' => 'int64',
        'auto_advance' => null,
        'billing_reason' => null,
        'created' => 'int64',
        'currency' => null,
        'description' => null,
        'due_date' => 'int64',
        'hosted_invoice_url' => null,
        'id' => null,
        'number' => null,
        'paid_date' => 'int64',
        'period_end' => 'int64',
        'period_start' => 'int64',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_due' => 'amountDue',
        'amount_paid' => 'amountPaid',
        'amount_remaining' => 'amountRemaining',
        'auto_advance' => 'autoAdvance',
        'billing_reason' => 'billingReason',
        'created' => 'created',
        'currency' => 'currency',
        'description' => 'description',
        'due_date' => 'dueDate',
        'hosted_invoice_url' => 'hostedInvoiceUrl',
        'id' => 'id',
        'number' => 'number',
        'paid_date' => 'paidDate',
        'period_end' => 'periodEnd',
        'period_start' => 'periodStart',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_due' => 'setAmountDue',
        'amount_paid' => 'setAmountPaid',
        'amount_remaining' => 'setAmountRemaining',
        'auto_advance' => 'setAutoAdvance',
        'billing_reason' => 'setBillingReason',
        'created' => 'setCreated',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'due_date' => 'setDueDate',
        'hosted_invoice_url' => 'setHostedInvoiceUrl',
        'id' => 'setId',
        'number' => 'setNumber',
        'paid_date' => 'setPaidDate',
        'period_end' => 'setPeriodEnd',
        'period_start' => 'setPeriodStart',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_due' => 'getAmountDue',
        'amount_paid' => 'getAmountPaid',
        'amount_remaining' => 'getAmountRemaining',
        'auto_advance' => 'getAutoAdvance',
        'billing_reason' => 'getBillingReason',
        'created' => 'getCreated',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'due_date' => 'getDueDate',
        'hosted_invoice_url' => 'getHostedInvoiceUrl',
        'id' => 'getId',
        'number' => 'getNumber',
        'paid_date' => 'getPaidDate',
        'period_end' => 'getPeriodEnd',
        'period_start' => 'getPeriodStart',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_due'] = isset($data['amount_due']) ? $data['amount_due'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['amount_remaining'] = isset($data['amount_remaining']) ? $data['amount_remaining'] : null;
        $this->container['auto_advance'] = isset($data['auto_advance']) ? $data['auto_advance'] : null;
        $this->container['billing_reason'] = isset($data['billing_reason']) ? $data['billing_reason'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['hosted_invoice_url'] = isset($data['hosted_invoice_url']) ? $data['hosted_invoice_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_due
     *
     * @return string
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param string $amount_due amount_due
     *
     * @return $this
     */
    public function setAmountDue($amount_due)
    {
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return string
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param string $amount_paid amount_paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets amount_remaining
     *
     * @return string
     */
    public function getAmountRemaining()
    {
        return $this->container['amount_remaining'];
    }

    /**
     * Sets amount_remaining
     *
     * @param string $amount_remaining amount_remaining
     *
     * @return $this
     */
    public function setAmountRemaining($amount_remaining)
    {
        $this->container['amount_remaining'] = $amount_remaining;

        return $this;
    }

    /**
     * Gets auto_advance
     *
     * @return bool
     */
    public function getAutoAdvance()
    {
        return $this->container['auto_advance'];
    }

    /**
     * Sets auto_advance
     *
     * @param bool $auto_advance auto_advance
     *
     * @return $this
     */
    public function setAutoAdvance($auto_advance)
    {
        $this->container['auto_advance'] = $auto_advance;

        return $this;
    }

    /**
     * Gets billing_reason
     *
     * @return string
     */
    public function getBillingReason()
    {
        return $this->container['billing_reason'];
    }

    /**
     * Sets billing_reason
     *
     * @param string $billing_reason billing_reason
     *
     * @return $this
     */
    public function setBillingReason($billing_reason)
    {
        $this->container['billing_reason'] = $billing_reason;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets hosted_invoice_url
     *
     * @return string
     */
    public function getHostedInvoiceUrl()
    {
        return $this->container['hosted_invoice_url'];
    }

    /**
     * Sets hosted_invoice_url
     *
     * @param string $hosted_invoice_url hosted_invoice_url
     *
     * @return $this
     */
    public function setHostedInvoiceUrl($hosted_invoice_url)
    {
        $this->container['hosted_invoice_url'] = $hosted_invoice_url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return string
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param string $paid_date paid_date
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return string
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
