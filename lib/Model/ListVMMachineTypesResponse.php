<?php
/**
 * ListVMMachineTypesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListVMMachineTypesResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListVMMachineTypesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListVMMachineTypesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count_vm_available' => 'int',
        'cpu_models' => '\Swagger\Client\Model\CpuModelCategory[]',
        'data_centers' => '\Swagger\Client\Model\DataCenterCategory[]',
        'gpu_models' => '\Swagger\Client\Model\GpuModelCategory[]',
        'host_configs' => '\Swagger\Client\Model\HostConfigCategory[]',
        'max_gpu' => 'int',
        'max_memory_gib' => 'int',
        'max_vcpu' => 'int',
        'request' => '\Swagger\Client\Model\ListVMMachineTypesRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count_vm_available' => 'int32',
        'cpu_models' => null,
        'data_centers' => null,
        'gpu_models' => null,
        'host_configs' => null,
        'max_gpu' => 'int32',
        'max_memory_gib' => 'int32',
        'max_vcpu' => 'int32',
        'request' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count_vm_available' => 'countVmAvailable',
        'cpu_models' => 'cpuModels',
        'data_centers' => 'dataCenters',
        'gpu_models' => 'gpuModels',
        'host_configs' => 'hostConfigs',
        'max_gpu' => 'maxGpu',
        'max_memory_gib' => 'maxMemoryGib',
        'max_vcpu' => 'maxVcpu',
        'request' => 'request'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count_vm_available' => 'setCountVmAvailable',
        'cpu_models' => 'setCpuModels',
        'data_centers' => 'setDataCenters',
        'gpu_models' => 'setGpuModels',
        'host_configs' => 'setHostConfigs',
        'max_gpu' => 'setMaxGpu',
        'max_memory_gib' => 'setMaxMemoryGib',
        'max_vcpu' => 'setMaxVcpu',
        'request' => 'setRequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count_vm_available' => 'getCountVmAvailable',
        'cpu_models' => 'getCpuModels',
        'data_centers' => 'getDataCenters',
        'gpu_models' => 'getGpuModels',
        'host_configs' => 'getHostConfigs',
        'max_gpu' => 'getMaxGpu',
        'max_memory_gib' => 'getMaxMemoryGib',
        'max_vcpu' => 'getMaxVcpu',
        'request' => 'getRequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count_vm_available'] = isset($data['count_vm_available']) ? $data['count_vm_available'] : null;
        $this->container['cpu_models'] = isset($data['cpu_models']) ? $data['cpu_models'] : null;
        $this->container['data_centers'] = isset($data['data_centers']) ? $data['data_centers'] : null;
        $this->container['gpu_models'] = isset($data['gpu_models']) ? $data['gpu_models'] : null;
        $this->container['host_configs'] = isset($data['host_configs']) ? $data['host_configs'] : null;
        $this->container['max_gpu'] = isset($data['max_gpu']) ? $data['max_gpu'] : null;
        $this->container['max_memory_gib'] = isset($data['max_memory_gib']) ? $data['max_memory_gib'] : null;
        $this->container['max_vcpu'] = isset($data['max_vcpu']) ? $data['max_vcpu'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['count_vm_available'] === null) {
            $invalidProperties[] = "'count_vm_available' can't be null";
        }
        if ($this->container['cpu_models'] === null) {
            $invalidProperties[] = "'cpu_models' can't be null";
        }
        if ($this->container['data_centers'] === null) {
            $invalidProperties[] = "'data_centers' can't be null";
        }
        if ($this->container['gpu_models'] === null) {
            $invalidProperties[] = "'gpu_models' can't be null";
        }
        if ($this->container['host_configs'] === null) {
            $invalidProperties[] = "'host_configs' can't be null";
        }
        if ($this->container['max_gpu'] === null) {
            $invalidProperties[] = "'max_gpu' can't be null";
        }
        if ($this->container['max_memory_gib'] === null) {
            $invalidProperties[] = "'max_memory_gib' can't be null";
        }
        if ($this->container['max_vcpu'] === null) {
            $invalidProperties[] = "'max_vcpu' can't be null";
        }
        if ($this->container['request'] === null) {
            $invalidProperties[] = "'request' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count_vm_available
     *
     * @return int
     */
    public function getCountVmAvailable()
    {
        return $this->container['count_vm_available'];
    }

    /**
     * Sets count_vm_available
     *
     * @param int $count_vm_available count_vm_available
     *
     * @return $this
     */
    public function setCountVmAvailable($count_vm_available)
    {
        $this->container['count_vm_available'] = $count_vm_available;

        return $this;
    }

    /**
     * Gets cpu_models
     *
     * @return \Swagger\Client\Model\CpuModelCategory[]
     */
    public function getCpuModels()
    {
        return $this->container['cpu_models'];
    }

    /**
     * Sets cpu_models
     *
     * @param \Swagger\Client\Model\CpuModelCategory[] $cpu_models cpu_models
     *
     * @return $this
     */
    public function setCpuModels($cpu_models)
    {
        $this->container['cpu_models'] = $cpu_models;

        return $this;
    }

    /**
     * Gets data_centers
     *
     * @return \Swagger\Client\Model\DataCenterCategory[]
     */
    public function getDataCenters()
    {
        return $this->container['data_centers'];
    }

    /**
     * Sets data_centers
     *
     * @param \Swagger\Client\Model\DataCenterCategory[] $data_centers data_centers
     *
     * @return $this
     */
    public function setDataCenters($data_centers)
    {
        $this->container['data_centers'] = $data_centers;

        return $this;
    }

    /**
     * Gets gpu_models
     *
     * @return \Swagger\Client\Model\GpuModelCategory[]
     */
    public function getGpuModels()
    {
        return $this->container['gpu_models'];
    }

    /**
     * Sets gpu_models
     *
     * @param \Swagger\Client\Model\GpuModelCategory[] $gpu_models gpu_models
     *
     * @return $this
     */
    public function setGpuModels($gpu_models)
    {
        $this->container['gpu_models'] = $gpu_models;

        return $this;
    }

    /**
     * Gets host_configs
     *
     * @return \Swagger\Client\Model\HostConfigCategory[]
     */
    public function getHostConfigs()
    {
        return $this->container['host_configs'];
    }

    /**
     * Sets host_configs
     *
     * @param \Swagger\Client\Model\HostConfigCategory[] $host_configs host_configs
     *
     * @return $this
     */
    public function setHostConfigs($host_configs)
    {
        $this->container['host_configs'] = $host_configs;

        return $this;
    }

    /**
     * Gets max_gpu
     *
     * @return int
     */
    public function getMaxGpu()
    {
        return $this->container['max_gpu'];
    }

    /**
     * Sets max_gpu
     *
     * @param int $max_gpu max_gpu
     *
     * @return $this
     */
    public function setMaxGpu($max_gpu)
    {
        $this->container['max_gpu'] = $max_gpu;

        return $this;
    }

    /**
     * Gets max_memory_gib
     *
     * @return int
     */
    public function getMaxMemoryGib()
    {
        return $this->container['max_memory_gib'];
    }

    /**
     * Sets max_memory_gib
     *
     * @param int $max_memory_gib max_memory_gib
     *
     * @return $this
     */
    public function setMaxMemoryGib($max_memory_gib)
    {
        $this->container['max_memory_gib'] = $max_memory_gib;

        return $this;
    }

    /**
     * Gets max_vcpu
     *
     * @return int
     */
    public function getMaxVcpu()
    {
        return $this->container['max_vcpu'];
    }

    /**
     * Sets max_vcpu
     *
     * @param int $max_vcpu max_vcpu
     *
     * @return $this
     */
    public function setMaxVcpu($max_vcpu)
    {
        $this->container['max_vcpu'] = $max_vcpu;

        return $this;
    }

    /**
     * Gets request
     *
     * @return \Swagger\Client\Model\ListVMMachineTypesRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \Swagger\Client\Model\ListVMMachineTypesRequest $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
