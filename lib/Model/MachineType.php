<?php
/**
 * MachineType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MachineType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MachineType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MachineType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'count_clusters' => 'int',
        'count_hosts' => 'int',
        'count_hosts_active' => 'int',
        'count_hosts_inactive' => 'int',
        'machine_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'count_clusters' => 'int32',
        'count_hosts' => 'int32',
        'count_hosts_active' => 'int32',
        'count_hosts_inactive' => 'int32',
        'machine_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count_clusters' => 'countClusters',
        'count_hosts' => 'countHosts',
        'count_hosts_active' => 'countHostsActive',
        'count_hosts_inactive' => 'countHostsInactive',
        'machine_type' => 'machineType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count_clusters' => 'setCountClusters',
        'count_hosts' => 'setCountHosts',
        'count_hosts_active' => 'setCountHostsActive',
        'count_hosts_inactive' => 'setCountHostsInactive',
        'machine_type' => 'setMachineType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count_clusters' => 'getCountClusters',
        'count_hosts' => 'getCountHosts',
        'count_hosts_active' => 'getCountHostsActive',
        'count_hosts_inactive' => 'getCountHostsInactive',
        'machine_type' => 'getMachineType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count_clusters'] = isset($data['count_clusters']) ? $data['count_clusters'] : null;
        $this->container['count_hosts'] = isset($data['count_hosts']) ? $data['count_hosts'] : null;
        $this->container['count_hosts_active'] = isset($data['count_hosts_active']) ? $data['count_hosts_active'] : null;
        $this->container['count_hosts_inactive'] = isset($data['count_hosts_inactive']) ? $data['count_hosts_inactive'] : null;
        $this->container['machine_type'] = isset($data['machine_type']) ? $data['machine_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['count_clusters'] === null) {
            $invalidProperties[] = "'count_clusters' can't be null";
        }
        if ($this->container['count_hosts'] === null) {
            $invalidProperties[] = "'count_hosts' can't be null";
        }
        if ($this->container['count_hosts_active'] === null) {
            $invalidProperties[] = "'count_hosts_active' can't be null";
        }
        if ($this->container['count_hosts_inactive'] === null) {
            $invalidProperties[] = "'count_hosts_inactive' can't be null";
        }
        if ($this->container['machine_type'] === null) {
            $invalidProperties[] = "'machine_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count_clusters
     *
     * @return int
     */
    public function getCountClusters()
    {
        return $this->container['count_clusters'];
    }

    /**
     * Sets count_clusters
     *
     * @param int $count_clusters count_clusters
     *
     * @return $this
     */
    public function setCountClusters($count_clusters)
    {
        $this->container['count_clusters'] = $count_clusters;

        return $this;
    }

    /**
     * Gets count_hosts
     *
     * @return int
     */
    public function getCountHosts()
    {
        return $this->container['count_hosts'];
    }

    /**
     * Sets count_hosts
     *
     * @param int $count_hosts count_hosts
     *
     * @return $this
     */
    public function setCountHosts($count_hosts)
    {
        $this->container['count_hosts'] = $count_hosts;

        return $this;
    }

    /**
     * Gets count_hosts_active
     *
     * @return int
     */
    public function getCountHostsActive()
    {
        return $this->container['count_hosts_active'];
    }

    /**
     * Sets count_hosts_active
     *
     * @param int $count_hosts_active count_hosts_active
     *
     * @return $this
     */
    public function setCountHostsActive($count_hosts_active)
    {
        $this->container['count_hosts_active'] = $count_hosts_active;

        return $this;
    }

    /**
     * Gets count_hosts_inactive
     *
     * @return int
     */
    public function getCountHostsInactive()
    {
        return $this->container['count_hosts_inactive'];
    }

    /**
     * Sets count_hosts_inactive
     *
     * @param int $count_hosts_inactive count_hosts_inactive
     *
     * @return $this
     */
    public function setCountHostsInactive($count_hosts_inactive)
    {
        $this->container['count_hosts_inactive'] = $count_hosts_inactive;

        return $this;
    }

    /**
     * Gets machine_type
     *
     * @return string
     */
    public function getMachineType()
    {
        return $this->container['machine_type'];
    }

    /**
     * Sets machine_type
     *
     * @param string $machine_type machine_type
     *
     * @return $this
     */
    public function setMachineType($machine_type)
    {
        $this->container['machine_type'] = $machine_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
