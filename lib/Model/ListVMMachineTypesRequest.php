<?php
/**
 * ListVMMachineTypesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListVMMachineTypesRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListVMMachineTypesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListVMMachineTypesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_model' => 'string',
        'data_center_id' => 'string',
        'gpu' => 'int',
        'gpu_model' => 'string',
        'memory_gib' => 'int',
        'order_by' => 'string',
        'page_number' => 'int',
        'page_size' => 'int',
        'public_ipv4' => 'bool',
        'region_id' => 'string',
        'storage_gib' => 'int',
        'vcpu' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_model' => null,
        'data_center_id' => null,
        'gpu' => 'int32',
        'gpu_model' => null,
        'memory_gib' => 'int32',
        'order_by' => null,
        'page_number' => 'int32',
        'page_size' => 'int32',
        'public_ipv4' => null,
        'region_id' => null,
        'storage_gib' => 'int32',
        'vcpu' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_model' => 'cpuModel',
        'data_center_id' => 'dataCenterId',
        'gpu' => 'gpu',
        'gpu_model' => 'gpuModel',
        'memory_gib' => 'memoryGib',
        'order_by' => 'orderBy',
        'page_number' => 'pageNumber',
        'page_size' => 'pageSize',
        'public_ipv4' => 'publicIpv4',
        'region_id' => 'regionId',
        'storage_gib' => 'storageGib',
        'vcpu' => 'vcpu'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_model' => 'setCpuModel',
        'data_center_id' => 'setDataCenterId',
        'gpu' => 'setGpu',
        'gpu_model' => 'setGpuModel',
        'memory_gib' => 'setMemoryGib',
        'order_by' => 'setOrderBy',
        'page_number' => 'setPageNumber',
        'page_size' => 'setPageSize',
        'public_ipv4' => 'setPublicIpv4',
        'region_id' => 'setRegionId',
        'storage_gib' => 'setStorageGib',
        'vcpu' => 'setVcpu'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_model' => 'getCpuModel',
        'data_center_id' => 'getDataCenterId',
        'gpu' => 'getGpu',
        'gpu_model' => 'getGpuModel',
        'memory_gib' => 'getMemoryGib',
        'order_by' => 'getOrderBy',
        'page_number' => 'getPageNumber',
        'page_size' => 'getPageSize',
        'public_ipv4' => 'getPublicIpv4',
        'region_id' => 'getRegionId',
        'storage_gib' => 'getStorageGib',
        'vcpu' => 'getVcpu'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_model'] = isset($data['cpu_model']) ? $data['cpu_model'] : null;
        $this->container['data_center_id'] = isset($data['data_center_id']) ? $data['data_center_id'] : null;
        $this->container['gpu'] = isset($data['gpu']) ? $data['gpu'] : null;
        $this->container['gpu_model'] = isset($data['gpu_model']) ? $data['gpu_model'] : null;
        $this->container['memory_gib'] = isset($data['memory_gib']) ? $data['memory_gib'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['public_ipv4'] = isset($data['public_ipv4']) ? $data['public_ipv4'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['storage_gib'] = isset($data['storage_gib']) ? $data['storage_gib'] : null;
        $this->container['vcpu'] = isset($data['vcpu']) ? $data['vcpu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['memory_gib'] === null) {
            $invalidProperties[] = "'memory_gib' can't be null";
        }
        if ($this->container['vcpu'] === null) {
            $invalidProperties[] = "'vcpu' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_model
     *
     * @return string
     */
    public function getCpuModel()
    {
        return $this->container['cpu_model'];
    }

    /**
     * Sets cpu_model
     *
     * @param string $cpu_model cpu_model
     *
     * @return $this
     */
    public function setCpuModel($cpu_model)
    {
        $this->container['cpu_model'] = $cpu_model;

        return $this;
    }

    /**
     * Gets data_center_id
     *
     * @return string
     */
    public function getDataCenterId()
    {
        return $this->container['data_center_id'];
    }

    /**
     * Sets data_center_id
     *
     * @param string $data_center_id data_center_id
     *
     * @return $this
     */
    public function setDataCenterId($data_center_id)
    {
        $this->container['data_center_id'] = $data_center_id;

        return $this;
    }

    /**
     * Gets gpu
     *
     * @return int
     */
    public function getGpu()
    {
        return $this->container['gpu'];
    }

    /**
     * Sets gpu
     *
     * @param int $gpu gpu
     *
     * @return $this
     */
    public function setGpu($gpu)
    {
        $this->container['gpu'] = $gpu;

        return $this;
    }

    /**
     * Gets gpu_model
     *
     * @return string
     */
    public function getGpuModel()
    {
        return $this->container['gpu_model'];
    }

    /**
     * Sets gpu_model
     *
     * @param string $gpu_model gpu_model
     *
     * @return $this
     */
    public function setGpuModel($gpu_model)
    {
        $this->container['gpu_model'] = $gpu_model;

        return $this;
    }

    /**
     * Gets memory_gib
     *
     * @return int
     */
    public function getMemoryGib()
    {
        return $this->container['memory_gib'];
    }

    /**
     * Sets memory_gib
     *
     * @param int $memory_gib memory_gib
     *
     * @return $this
     */
    public function setMemoryGib($memory_gib)
    {
        $this->container['memory_gib'] = $memory_gib;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int $page_number page_number
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets public_ipv4
     *
     * @return bool
     */
    public function getPublicIpv4()
    {
        return $this->container['public_ipv4'];
    }

    /**
     * Sets public_ipv4
     *
     * @param bool $public_ipv4 public_ipv4
     *
     * @return $this
     */
    public function setPublicIpv4($public_ipv4)
    {
        $this->container['public_ipv4'] = $public_ipv4;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets storage_gib
     *
     * @return int
     */
    public function getStorageGib()
    {
        return $this->container['storage_gib'];
    }

    /**
     * Sets storage_gib
     *
     * @param int $storage_gib storage_gib
     *
     * @return $this
     */
    public function setStorageGib($storage_gib)
    {
        $this->container['storage_gib'] = $storage_gib;

        return $this;
    }

    /**
     * Gets vcpu
     *
     * @return int
     */
    public function getVcpu()
    {
        return $this->container['vcpu'];
    }

    /**
     * Sets vcpu
     *
     * @param int $vcpu vcpu
     *
     * @return $this
     */
    public function setVcpu($vcpu)
    {
        $this->container['vcpu'] = $vcpu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
