<?php
/**
 * Disk
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cudo Compute service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Disk Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Disk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Disk';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => '\DateTime',
        'data_center_id' => 'string',
        'disk_state' => '\Swagger\Client\Model\DiskState',
        'disk_type' => '\Swagger\Client\Model\DiskType',
        'id' => 'string',
        'private_image_id' => 'string',
        'project_id' => 'string',
        'public_image_id' => 'string',
        'size_gib' => 'int',
        'storage_class' => '\Swagger\Client\Model\DiskStorageClass',
        'vm_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => 'date-time',
        'data_center_id' => null,
        'disk_state' => null,
        'disk_type' => null,
        'id' => null,
        'private_image_id' => null,
        'project_id' => null,
        'public_image_id' => null,
        'size_gib' => 'int32',
        'storage_class' => null,
        'vm_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'createTime',
        'data_center_id' => 'dataCenterId',
        'disk_state' => 'diskState',
        'disk_type' => 'diskType',
        'id' => 'id',
        'private_image_id' => 'privateImageId',
        'project_id' => 'projectId',
        'public_image_id' => 'publicImageId',
        'size_gib' => 'sizeGib',
        'storage_class' => 'storageClass',
        'vm_id' => 'vmId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'data_center_id' => 'setDataCenterId',
        'disk_state' => 'setDiskState',
        'disk_type' => 'setDiskType',
        'id' => 'setId',
        'private_image_id' => 'setPrivateImageId',
        'project_id' => 'setProjectId',
        'public_image_id' => 'setPublicImageId',
        'size_gib' => 'setSizeGib',
        'storage_class' => 'setStorageClass',
        'vm_id' => 'setVmId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'data_center_id' => 'getDataCenterId',
        'disk_state' => 'getDiskState',
        'disk_type' => 'getDiskType',
        'id' => 'getId',
        'private_image_id' => 'getPrivateImageId',
        'project_id' => 'getProjectId',
        'public_image_id' => 'getPublicImageId',
        'size_gib' => 'getSizeGib',
        'storage_class' => 'getStorageClass',
        'vm_id' => 'getVmId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['data_center_id'] = isset($data['data_center_id']) ? $data['data_center_id'] : null;
        $this->container['disk_state'] = isset($data['disk_state']) ? $data['disk_state'] : null;
        $this->container['disk_type'] = isset($data['disk_type']) ? $data['disk_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['private_image_id'] = isset($data['private_image_id']) ? $data['private_image_id'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['public_image_id'] = isset($data['public_image_id']) ? $data['public_image_id'] : null;
        $this->container['size_gib'] = isset($data['size_gib']) ? $data['size_gib'] : null;
        $this->container['storage_class'] = isset($data['storage_class']) ? $data['storage_class'] : null;
        $this->container['vm_id'] = isset($data['vm_id']) ? $data['vm_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['size_gib'] === null) {
            $invalidProperties[] = "'size_gib' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return \DateTime
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param \DateTime $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets data_center_id
     *
     * @return string
     */
    public function getDataCenterId()
    {
        return $this->container['data_center_id'];
    }

    /**
     * Sets data_center_id
     *
     * @param string $data_center_id data_center_id
     *
     * @return $this
     */
    public function setDataCenterId($data_center_id)
    {
        $this->container['data_center_id'] = $data_center_id;

        return $this;
    }

    /**
     * Gets disk_state
     *
     * @return \Swagger\Client\Model\DiskState
     */
    public function getDiskState()
    {
        return $this->container['disk_state'];
    }

    /**
     * Sets disk_state
     *
     * @param \Swagger\Client\Model\DiskState $disk_state disk_state
     *
     * @return $this
     */
    public function setDiskState($disk_state)
    {
        $this->container['disk_state'] = $disk_state;

        return $this;
    }

    /**
     * Gets disk_type
     *
     * @return \Swagger\Client\Model\DiskType
     */
    public function getDiskType()
    {
        return $this->container['disk_type'];
    }

    /**
     * Sets disk_type
     *
     * @param \Swagger\Client\Model\DiskType $disk_type disk_type
     *
     * @return $this
     */
    public function setDiskType($disk_type)
    {
        $this->container['disk_type'] = $disk_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets private_image_id
     *
     * @return string
     */
    public function getPrivateImageId()
    {
        return $this->container['private_image_id'];
    }

    /**
     * Sets private_image_id
     *
     * @param string $private_image_id private_image_id
     *
     * @return $this
     */
    public function setPrivateImageId($private_image_id)
    {
        $this->container['private_image_id'] = $private_image_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets public_image_id
     *
     * @return string
     */
    public function getPublicImageId()
    {
        return $this->container['public_image_id'];
    }

    /**
     * Sets public_image_id
     *
     * @param string $public_image_id public_image_id
     *
     * @return $this
     */
    public function setPublicImageId($public_image_id)
    {
        $this->container['public_image_id'] = $public_image_id;

        return $this;
    }

    /**
     * Gets size_gib
     *
     * @return int
     */
    public function getSizeGib()
    {
        return $this->container['size_gib'];
    }

    /**
     * Sets size_gib
     *
     * @param int $size_gib size_gib
     *
     * @return $this
     */
    public function setSizeGib($size_gib)
    {
        $this->container['size_gib'] = $size_gib;

        return $this;
    }

    /**
     * Gets storage_class
     *
     * @return \Swagger\Client\Model\DiskStorageClass
     */
    public function getStorageClass()
    {
        return $this->container['storage_class'];
    }

    /**
     * Sets storage_class
     *
     * @param \Swagger\Client\Model\DiskStorageClass $storage_class storage_class
     *
     * @return $this
     */
    public function setStorageClass($storage_class)
    {
        $this->container['storage_class'] = $storage_class;

        return $this;
    }

    /**
     * Gets vm_id
     *
     * @return string
     */
    public function getVmId()
    {
        return $this->container['vm_id'];
    }

    /**
     * Sets vm_id
     *
     * @param string $vm_id vm_id
     *
     * @return $this
     */
    public function setVmId($vm_id)
    {
        $this->container['vm_id'] = $vm_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
